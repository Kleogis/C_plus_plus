//bboard.h

#ifndef __BBOARD_H_ //inclusion guard
#define __BBOARD_H_

#include "user.h"   //include user.h
#include "topic.h"
#include "reply.h"
#include "message.h"

#include <iostream>//iostream and vector
#include <vector>

using namespace std;    //standard namespace

class Bboard {  //Bboard class
    
private:
    string title;   //title of Bboard
    vector<User> user_list; //vector or users
    const User* current_user;  //current user logged in
    vector<Message*> message_list;   //message list vector
    
public:
    Bboard();   //defauly constructor
    Bboard( const string &ttl );    //constructor
    ~Bboard();
    bool load_users(const string& userfile);   //setup function
    void login();   //login function
    void run();     //run function
    bool load_messages(const string& datafile); //gets all messages, datafile
    bool save_messages(const string& datafile); //prints all messages, datafile
    void add_topic();   //adds topic to messagelist
    void add_reply();   //adds reply to messagelist
    
private:    
    void add_user(const string& name, const string& pass);
        //adds user to the user_list vector
    const User* get_user(const string& name, const string& pw) const;
        //gets a user with the name
    void display() const;
        //displays the format for the messages
    
};

#endif //__BBOARD_H_


//bboard.cpp

#include "bboard.h"     //include bboard.h
#include <iostream>
#include <fstream>
#include <sstream>
    
using namespace std;    //standard namespace

//begin constructors
Bboard::Bboard()
:title("Kevin's Bulletin Board"), current_user( NULL ) {
            //default constructor
}

Bboard::Bboard( const string &ttl )     //constructor for setting title
:title(ttl), current_user( NULL ) {
    
}

Bboard::~Bboard() {
    for (unsigned i = 0; i < message_list.size(); i++) {
        delete message_list.at(i);
    }
    
}
//end constructors


bool Bboard::load_users(const string& userfile) {  //setup function
    string name;    //input for username
    string pass;    //input for password
    
    ifstream input;
    input.open( userfile.c_str() );
    
    if( input.fail() ) {
        input.close();
        return false;
    }
    
    while (name != "end") {     //loops til it reaches the word "end"
        
        input >> name;        //takes in input
        
        if( name != "end" ) {  //checks if its not "end" to continue to get pass
            input >> pass;
            add_user( name, pass);  //adds user to the vector
        }
        
    }
    
    input.close();
    return true;
}


void Bboard::login() {  //login function    
    
    string name, pass;  //username and password variables
    
    cout << "Welcome to " << title << endl;  //starting title
    
    while ( get_user(name,pass) == NULL ) {//loops til it gets correct input
        cout << "Enter your username ('Q' or 'q' to quit): ";
        cin >> name;    //takes input, Q or q to quit
        
        if (name == "Q" || name == "q") {   //if Q or q, quit the program
            cout << "Bye!" << endl;
            exit(0);
        } else {      //else, take in the password
            cout << "Enter your password: ";
            cin >> pass;
            
            if (get_user(name,pass) == NULL) {  //tells user wrong password/user
                cout << "Invalid Username or Password!" << endl << endl;
            } else {    //tells user if they logged in
                cout << "Welcome back " << name << "!" << endl << endl;
                current_user = get_user(name,pass);
            }
        }
        
    }
    
}


void Bboard::run() {    //run function
    
    char input; //input variable
    
    if (current_user == NULL) {
        exit(1);
    }
    
    do {
        
        cout << "Menu" << endl; //display the entire menu
        cout << "  " << "- Display Messages ('D' or 'd')" << endl
             << "  " << "- Add New Topic ('N' or 'n')" << endl
             << "  " << "- Add Reply ('R' or 'r')" << endl
             << "  " << "- Quit ('Q' or 'q')" << endl;
        cout << "Choose an action: ";
        cin >> input;   //takes in input
        
        cout << endl;
        
        if (input == 'D' || input == 'd') { //if D or d, display the bulletin
            display();
        } else if( input == 'N' || input == 'n' ) { //writes a new bulletin
            add_topic();
        } else if( input == 'R' || input == 'r' ) {
            add_reply();
        } else if( input == 'Q' || input == 'q' ) { //quits the program
            cout << "Bye!" << endl;
            return;
        } else {    //tells user that the input is invalid
            cout << "Invalid action. Please try again." << endl << endl;
        }
        
        
        
    } while( input != 'Q' || input != 'q' );    //breaks when input is Q or q
    
}


bool Bboard::load_messages(const string& datafile) {
    string athr, sbjct, bdy, children, topic_or_reply, input;
    unsigned id, numOfMessages; //initialie variables
    
    ifstream ipfile;
    ipfile.open( datafile.c_str() );    //open datafile
    
    if (ipfile.fail()) {
        return false;   //checks if its opened or not
    }
    
    ipfile >> numOfMessages;    //reads in number of messages and makes vector
    vector< vector<int> > temp_children(numOfMessages);
    
    while (numOfMessages != 0) {    //loops until all messages are read in
        ipfile >> topic_or_reply;   //takes in <begin_????> thing
        
        input = ""; //re-sets all the variables for a new input
        id = 0;
        sbjct = "";
        athr = "";
        bdy = "";
        children = "";
        
        while (input != "<end>") {  //loops til it gets to end of message
            
            ipfile >> input;    //takes in a header (:???:)
            
            if (input == ":id:") {  //takes in id
                ipfile >> id;
            } else if (input == ":subject:") {  //takes in subject
                getline( ipfile, sbjct );
                sbjct = sbjct.substr(1);
            } else if (input == ":from:") { //takes in author
                ipfile >> athr;
            } else if (input == ":children:") { //takes in children (replies)
                getline( ipfile, children);
                children = children.substr(1);  //gets a string of children
                
                int temp;
                
                stringstream iss( children );   //separates them and pushes to
                while (iss >> temp) {           //temporary vector
                    temp_children.at(id-1).push_back(temp);
                }
                
            } else if (input == ":body:") { //takes in body
                while (input != "<end>") {  //loops til it reaches <end>
                    
                    getline( ipfile, input );   //gets 1 line at a time
                    
                    if (input == "<end>") {
                        break;  //if it reaches <end>, its done
                    }
                    
                    bdy = bdy + input + '\n';   //concatenates to bdy
                }
                
                bdy = bdy.substr(1);    //gets rid of whitespace and stuff
                bdy = bdy.substr(0, bdy.size()-1);
            }
            
        }
            //pushes it into message_list vector according to class
        if (topic_or_reply == "<begin_topic>") {
            message_list.push_back( new Topic(athr, sbjct, bdy, id) );
        } else if( topic_or_reply == "<begin_reply>" ) {
            message_list.push_back( new Reply(athr, sbjct, bdy, id) );
        }
        
        numOfMessages--;//decrements number of messages til 0
    }
    
    ipfile.close();//close the input file
    
    for (unsigned i = 0; i < message_list.size(); i++) {
        for (unsigned j = 0; j < temp_children.at(i).size(); j++) {
            message_list.at(i) ->   //assigns all the pointers to chidren
            add_child( message_list.at( temp_children.at(i).at(j) - 1 ) );
        }
    }
    
    return true;    //returns true when all actions are done
}


bool Bboard::save_messages(const string& datafile) {//saves messages
    ofstream opfile;    //opens datafile
    opfile.open( datafile.c_str() );
    
    if (opfile.fail()) {    //checks if the file is opened
        return false;
    }
    
    opfile << message_list.size() << endl;  //outputs number of messages
    
    for (unsigned i = 0; i < message_list.size(); i++) {
        opfile << message_list.at(i) -> to_formatted_string();
    }   //outputs the to_formatted_string
    
    opfile.close(); //close te output file
    return true;    //return true after function is executed
}


void Bboard::add_topic() {  //adds a topic to messagelist
    string author = current_user -> get_username();
    string subject; //initialize variables
    string body, temp = " ";
    int id = message_list.size() + 1;   //id is 1 after the size
    
    cin.ignore(1000, '\n'); //cin.ignore
    
    cout << "Enter Subject: ";  //gets the subject
    getline( cin, subject );
    
    cout << "Enter Body: "; //gets the body
    
    while( temp != "" ) {
        getline( cin, temp );
                //takes in body line by line until the line is blank
        if( temp == "" ) {
            break;
        }
        
        body = body + temp + '\n';  //concatenates to body
    }
    
    body = body.substr(0, body.size()-1);   //gets rid of whitespace
    
    Topic* temp_topic = new Topic( author, subject, body, id );
    message_list.push_back( temp_topic );   //pushes back to message list
}
    

void Bboard::add_reply() {  //adds a reply
    string author = current_user -> get_username();
    string subject; //initialize variables
    string body, temp = " ";
    int message_id;
    int id = message_list.size() + 1;   //id is 1 after size
    
    while( true ) {
        cout << "Enter Message ID (-1 for Menu): ";
        cin >> message_id;  //gets the message ID to reply to
        
        if (message_id == -1) { //if its -1, break out of function
            return;
        } else if( message_id == 0 || message_id > //checks the bounds
                   static_cast<int>(message_list.size()) ) {
            cout << "Invalid Message ID!!" << endl << endl;
        } else {
            break;  //else, continue with function
        }
    }
    
    subject = "Re: " + message_list.at( message_id - 1 ) -> get_subject();
        //gets subject
    cout << "Enter Body: ";
    
    cin.ignore(1000, '\n'); 
    
    while( temp != "" ) {
        getline( cin, temp );   //takes in body 1 line at a time until empty
        
        if( temp == "" ) {  //breaks out of loop when empty meaning done
            break;
        }
        
        body = body + temp + '\n';  //concatenates to body
    }
    
    body = body.substr(0, body.size()-1);   //gets rid of whitespace
    
    Reply* reply_temp = new Reply(author, subject, body, id);
    message_list.push_back( reply_temp );   //pushed back to message list
        //adds the pointer to the child
    message_list.at(message_id - 1) -> add_child( reply_temp );
}
   
   
void Bboard::add_user( const string &name, const string &pass ) {
    user_list.push_back( User(name,pass) ); //adds user into user_list vector
}


const User* Bboard::get_user(const string& name, const string& pw) const {
    for (unsigned i = 0; i < user_list.size(); i++) {
        if ( user_list.at(i).check(name, pw) ) {
            return &user_list.at(i); //returns a User if the username matches
        }
    }
    
    return NULL;
}


void Bboard::display() const {  //display function
    
    if (message_list.size() == 0) { //displays nothing if there is no messages
        cout << "Nothing to Display." << endl << endl;
    } else {
        for (unsigned i = 0; i < message_list.size(); i++) {
            
            if ( !(message_list.at(i) -> is_reply()) ) {
                cout << "-----------------------------------------------"
                     << endl;
                message_list.at(i) -> print(); //uses message display function
            }
            
        }
        
        cout << "-----------------------------------------------" << endl;
    }
    
}
//Message.h


//inclusion guards
#ifndef __MESSAGE_H_
#define __MESSAGE_H_
//includes
#include <iostream>
#include <vector>
#include <string>

using namespace std;


class Message  // abstract base class
{
protected:  // allow access to these members by objects of derived classes
    string author;
    string subject;
    string body;
    unsigned id;  // New !!
    // This will be the size of the message_list vector to which the
    // newly constructed Message* is being pushed_back
    vector<Message*> child_list; // New !!
    // This is how a Message is able to keep track of its Replies
    
public:
    
    //default constructor
    Message();
    
//Parameterized constructor; id will be the size of current Bboard message_list
    Message(const string& athr, const string& sbjct,
            const string& body, unsigned id);
    
    //be careful here, you must invoke delete on pointers to objects
    //How many Message/Reply/Topic objects do you have in your program?
    virtual ~Message();
    
    virtual void print() const = 0;
    
    // returns true if the object is reply.
    virtual bool is_reply() const = 0;
    
    //returns the subject string.
    string get_subject() const;
    
    // returns the id.
    unsigned get_id() const; // New !!
    
    virtual string to_formatted_string() const = 0;  // New !!
    
    // Adds a pointer to the child to child_list.
    void add_child(Message* child); // New !!
    
};

//end inc guards
#endif


//message.cpp

#include "message.h"
#include <iostream>

using namespace std;

Message::Message()  //default constructor
:author(""), subject(""), body(""), id( 0 ) {
    
}

//constructor that initializes everything
Message::Message(const string& athr, const string& sbjct,
         const string& body, unsigned id)
:author(athr), subject(sbjct), body(body), id(id) {
    
}


string Message::get_subject() const {
    return subject; //returns subject of message
}


unsigned Message::get_id() const {
    return id;  //return ID of message
}


void Message::add_child(Message* child) {
    child_list.push_back(child);    //adds a child to child list
}


Message::~Message() {
    //delete [] child_list;   //fix
}


//inclusion guards
#ifndef __REPLY_H_
#define __REPLY_H_
//includes
#include "message.h"
#include <iostream>


class Reply: public Message
{
    // no new member variables
    
public:
    //default constructor
    Reply();
    
    /* Parameterized constructor - similar to Message's constructor except:
     *  The subject should be initialized to "Re: <sbjct>" not <sbjct>.
     */
    Reply(const string& athr, const string& sbjct,
          const string& body, unsigned id);
    
    /* print the reply to screen in the given format - see output specs for details
     * Then it invokes print_subtree(n) on each of the messages in child_list
     * (we leave it to you to figure out what n is!)
     */
    virtual void print() const;
    
    /* This function is responsible for printing the selected Reply and all of its subtree recursively
     * After printing the Reply with the given indentation and format (see output details).
     * it calls the print_subtree function of all of the Replies in its child_list(see message)
     * with incremented indentation value.
     *
     * Note: Each indentation value represent 2 spaces. e.g. if indentation=1 the reply should be indented
     * 2 spaces, if it's 2, indent by 4 spaces.
     */
    virtual void print_subtree(unsigned indentation) const; // New !!
    
    virtual bool is_reply() const;
    
    /* to_formatted_string writes the contents of the Reply to a string in the following format:
     <begin_reply>
     :id: 4
     :subject: single line
     :from: author
     :children: 5 6 [this line should not be printed if there are no children.]
     :body: multiple lines
     2nd line
     <end>
     * the line starting with :children: has the list of id's of all children (See file specs. for details)
     */
    virtual string to_formatted_string() const; // New !!
    
private:
    string int_to_string(const unsigned& number) const;
    
};

//end inc guards
#endif



//reply.cpp

#include "reply.h"

#include <sstream>
#include <iostream>
#include <vector>

using namespace std;

Reply::Reply()
:Message() {    //default constructor
    
}


Reply::Reply(const string& athr, const string& sbjct,
      const string& body, unsigned id)
:Message(athr, sbjct, body, id) {
            //constructor
}


string Reply::to_formatted_string() const {
    string topic_formatted;//concatenating accumulator
    
    
    topic_formatted = "<begin_reply>\n:id: " + int_to_string(id) +
                      "\n:subject: " + subject +
                      "\n:from: " + author; //concatenates everything
    
    if (child_list.size() != 0) {   //if theres children, concatenate
        topic_formatted += "\n:children: ";
        
        for (unsigned i = 0; i < child_list.size(); i++) {
            topic_formatted = topic_formatted   //converts int to string 
            + int_to_string( child_list.at(i) -> get_id() ) + ' ';
        }   //used to concatenate to string
    }
    
    topic_formatted = topic_formatted + '\n' +
                      ":body: " + body + '\n' +
                      "<end>" + '\n';   //concatenates the body
    
    return topic_formatted; //return the accumulator
    
}


void Reply::print_subtree(unsigned indentation) const {
    
    cout << endl;
    
    for (unsigned j = 0; j < indentation; j++) {
        cout << "  ";   //prints amount of indentation
    }
    cout << "Message #" << id << ": " << subject << endl;//ID and subject prnted
    
    for (unsigned j = 0; j < indentation; j++) {
        cout << "  ";   //indentation
    }
    cout << "from " << author << ": ";
    
    for (unsigned j = 0; j < body.size(); j++) {
        cout << body.at(j);//prints each letter out one by one
                            //when it reaches new line, indent
        if (body.at(j) == '\n') {
            for (unsigned k = 0; k < indentation; k++) {
                cout << "  ";
            }
        }
    }
    
    cout << endl;
    
    for (unsigned i = 0; i < child_list.size(); i++) {
        dynamic_cast<Reply*>( child_list.at(i) ) ->
            print_subtree(indentation + 1); //recursive call to get all childs
    }
    //no base case since it is a void function.
    //when it reaches the end, it returns automatically
}



bool Reply::is_reply() const {
    return true;    //it is a reply to return true
}


void Reply::print() const { //outputs the message
    cout << "Message #" << id << ": " << subject << endl;
    cout << "from " << author << ": " << body << endl;
}


string Reply::int_to_string(const unsigned& number) const {
    stringstream ss;//create a stringstream
    ss << number;//add number to the stream
    return ss.str();//return a string with the contents of the stream
}

//inclusion guards
#ifndef __TOPIC_H_
#define __TOPIC_H_
//includes
#include "message.h"

class Topic: public Message
{
    // no new member variables
public:
    
    //default constructor
    Topic();
    
    //Parameterized constructor
    Topic(const string& athr, const string& sbjct,
          const string& body, unsigned id);
    
    /* this function will print the Topic as in the previous assignment.
     * Then it invokes print_subtree(1) on each of the messages in child_list
     * (which are all "first-level" Reply objects).
     */
    virtual void print() const; // Major Change!!
    
    virtual bool is_reply() const;
    
    /* to_formatted_string writes the contents of the Topic to a string in the following format:
     <begin_topic>
     :id: 4
     :subject: single line
     :from: author
     :children: 5 6 [this line should not be printed if there are no children.]
     :body: multiple lines - line 1
     line 2
     line 3
     <end>
     * line starting with :children: has the id's of all children (See file specs. for details)
     */
    virtual string to_formatted_string() const;  // New !!
    
private:
    string int_to_string(const unsigned& number) const;
    
};

//end inc guards
#endif

//topic.cpp
#include "topic.h"
#include "reply.h"
#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

Topic::Topic()
:Message() {
        //default constructor
}


Topic::Topic(const string& athr, const string& sbjct,
      const string& body, unsigned id)
:Message(athr, sbjct, body, id) {
    //constructor
}


void Topic::print() const {
    cout << "Message #" << id << ": " << subject << endl;
    cout << "from " << author << ": " << body << endl;
    //prints message id and subject and body
    
    for (unsigned i = 0; i < child_list.size(); i++) {
        dynamic_cast<Reply*>( child_list.at(i) ) -> print_subtree(1);
    }   //calls the recursive function on all children of the topic
    
}


string Topic::to_formatted_string() const {
    string topic_formatted; //string concatenating accumulator
    
    
    topic_formatted = "<begin_topic>\n:id: " + int_to_string(id) +
                      "\n:subject: " + subject +
                      "\n:from: " + author;//concatenates id, sbjct, athr
    
    if (child_list.size() != 0) {
        topic_formatted += "\n:children: ";
            //if no children, do not concatenate. if there is, do so
        for (unsigned i = 0; i < child_list.size(); i++) {
            topic_formatted = topic_formatted
            + int_to_string( child_list.at(i) -> get_id() ) + ' ';
        }
    }
    
    topic_formatted = topic_formatted + '\n' +  //concatenates body
                      ":body: " + body + '\n' +
                      "<end>" + '\n';
    
    return topic_formatted;
    
}


bool Topic::is_reply() const {
    return false;   //returns false cause its not a reply
}


string Topic::int_to_string(const unsigned& number) const {
    stringstream ss;//create a stringstream
    ss << number;//add number to the stream
    return ss.str();//return a string with the contents of the stream
}


//User.h


#ifndef __USER_H_
#define __USER_H_

#include <iostream>

using namespace std;

class User
{
    
private:
    
    string username;
    string password;
    
public:
    
    //creates a user with empty name and password.
    User();
    
    // creates a user with given username and password.
    User(const string& uname, const string& pass);
    
    
    //returns the username
    string get_username() const;
    
    // returns true if the stored username/password matches with the parameters.
    // Otherwise returns false.
    // Note that, even though a User with emptyl name and password is actually a valid User object
    // (it is the default User), this function must still return false if given a empty uname string.
    bool check(const string& uname, const string& pass) const;
    
    // sets a new password. This function will not be used in the current assignment.
    void set_password(const string& newpass);
    
};


#endif //__USER_H_


//user.cpp

#include "user.h"
#include <iostream>

using namespace std;

User::User()    //default constructor
:username(""), password("") {
    
}

//constrcutor initialized username and password
User::User(const string &uname, const string &pass )
:username(uname), password(pass) {
    
}

//gets the username 
string User::get_username() const {
    return username;
}


//checks if the passed in parameters matches the username and password
//returns true if matches
//returns false otherwise
bool User::check(const string& uname, const string& pass) const {
    
    if (uname == username && pass == password) {
        return true;
    } else {
        return false;
    }
    
}

//includes
#include "bboard.h"

#include <iostream>

using namespace std;

int main(int argc, char** argv)
{
    // check commandline arguments (see Chapter 9, section 9.5 of the text for explanations and examples)
    if(argc != 3){
        cout << "ERROR: Invalid program call."<< endl
        << "Usage: <program_name> userfile datafile"<< endl;
        return -1;
    }
    string userfile(argv[1]);
    string datafile(argv[2]);
    
    Bboard bb("CS12 Bulletin Board");
    
    // load users from file
    if( !bb.load_users(userfile) )
    {
        cout << "ERROR: Cannot load users from "<<userfile<< endl;
        return -1;
    }
    
    // load messages
    if( !bb.load_messages(datafile) )
    {
        cout << "ERROR: Cannot load messages from "<< datafile<< endl;
        return -1;
    }
    
    bb.login();
    bb.run();
    
    // save messages
    if( !bb.save_messages(datafile) )
    {
        cout << "ERROR: Cannot save messages to "<<datafile<< endl;
        return -1;
    }
    return 0;
}

